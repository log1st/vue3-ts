@import "~@/assets/utils.scss";

.field {
  display: flex;
  flex-direction: column;

  &.primary {
    position: relative;

    .trigger {
      padding: 0 rem(10px) 0 0;
      background: rgba(var(--input-bg), 1);
      border-radius: rem(10px);

      display: flex;
      align-items: center;
    }

    .label {
      padding: rem(15px) 0 rem(15px) rem(10px);

      @include subText();

      + .action {
        margin-left: 10px;
      }
    }

    &.tiny {
      .trigger {
        padding: 0 rem(10px) 0 0;
      }
      .label {
        padding: rem(6px) 0 rem(6px) rem(10px);
      }
      .option {
        padding-top: rem(6px);
        padding-bottom: rem(6px);
      }
    }

    .value {
      color: rgba(var(--input-nobg-color), 1);
    }

    .placeholder {
      color: rgba(var(--input-nobg-color), 1);
      opacity: .6;
    }

    .action {
      &:not(:first-child) {
        margin-left: rem(4px);
        height: rem(15px);
        width: rem(15px);
        color: rgba(var(--table-color), 1);
      }

      &:last-child {
        //margin-right: rem(-10px);
      }
    }

    .errors {
      padding: 0 rem(10px);
    }

    .upLabel {
      @include text(true);
      color: rgba(var(--btn-color), 1);

      + * {
        margin-top: rem(10px);
      }
    }

    .options {
      position: absolute;
      z-index: 2;
      top: 100%;
      left: 0;
      right: 0;

      background: rgba(var(--lightblue), 1);
      border-bottom-left-radius: rem(10px);
      border-bottom-right-radius: rem(10px);

      max-height: rem(300px);
    }

    .option {
      padding: rem(9px) rem(10px);
      color: rgba(var(--dark), 1);

      @include input;

      cursor: pointer;

      &.active {
        background: rgba(var(--black), .1);
      }

      &:not(.active) {
        &:hover {
          background: rgba(var(--black), .05);
        }
      }
    }

    &.visible {
      &.hasOptions {
        .trigger {
          border-bottom-left-radius: 0;
          border-bottom-right-radius: 0;
        }
      }
      .caret {
        transform: rotate(180deg);
      }
    }

    &.hasErrors {
      .trigger {
        box-shadow: inset 0 0 0 rem(1px) rgba(var(--red), 1);
      }
    }

    &.light {
      .trigger {
        background: rgba(var(--input-second-color), 1);
      }
    }

    &.white {
      .trigger {
        background: rgba(var(--table-bg), 1);
        box-shadow: inset 0 0 0 rem(.5px) rgba(var(--gray-4), 1);
      }
      .label {
        @include subText;
      }
    }

    &.disabled {
      opacity: .7;
    }
  }

  &:not(.disabled) {
    .trigger {
      cursor: pointer;
    }
    .action {
      cursor: pointer;
    }
  }
}

.trigger {
  display: flex;
}

.label {
  display: flex;

  width: 0;
  flex-grow: 1;
}

.action {
  flex-shrink: 0;
}

.errors {
  color: rgba(var(--red), 1);

  margin-top: rem(3px);

  @include input;
}

.error {
  &:not(:first-child) {
    margin-top: 2px;
  }
}

.options {
  overflow-y: auto;
}
